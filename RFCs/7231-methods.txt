
|-----------------------------------|
|-----------REQUEST METHODS---------|
|-----------------------------------|

--------------------------------
------------OVERVIEW------------
--------------------------------

The request method indicates the reason of the to make a this request and what he expects
as a successful result. The request methods can be further specialized by some header fields
in a request. These methods can also have conflicts with header fields.
method = token
There are standardized methods commonly used in HTTP (uppercase, US-ASCII) :
	-GET : Transfer a current representation of the target resource.
	-HEAD : Same as GET, but only transfer the status line and header section.
	-POST : Perform resource-specific processing on the request payload.
	-PUT : Replace all current representations of the target resource with the request payload.
	-DELETE : Remove all current representations of the target resource.
	-CONNECT : Establish a tunnel to the server identified by the target resource.
 	-OPTIONS : Describe the communication options for the  target resource.
	-TRACE : Perform a message loop-back test along the path to the target resource.
All general-purpose servers must support the methods GET and HEAD. All other methods are optional.
The set of methods allowed by a target resource can be listed in an Allow header field.



--------------------------------
----COMMON METHOD PROPERTIES----
--------------------------------

/*1.Safe Methods*/
Request methods are considered "safe" if their defined semantics are essentially read-only.
Even safe methods can be harmful and partially not read-only but the client cannot be held
accountable for it.
GET, HEAD, OPTIONS and TRACE are defined to be safe.
More infos page 23.


/*2.Idempotent Methods*/
Request methods are considered "idempotent" if the effect on the server after multiple identical
requests is the same as the effect for a single request.
PUT, DELETE and the safe methods are idempotent.
They are useful because they can be repeated automatically if a communication failure occures.


/*3.Cacheable Methods*/
A cacheable method mean that responses to them are allowed to be stored for future reuse.
They have speicif requirements readble at [RFC7234].
Safe methods that don't depend on current or authoritative reponse are cacheable, it
defines GET, HEAD and POST but most cache implementation only support GET and HEAD. 



--------------------------------
-------METHOD DEFINITIONS-------
--------------------------------

/*1.GET*/
GET method requests transfer of a selected representation for the target resource.
It is the most used method to retrieve informations via HTTP.
Very detailed way about how resources work page 24 and 25.
A client can alter GET to be a "range request" requesting transfer of only some
part of the selected representation by sending a Range header field in the request.
[RFC7233] for more information about it.
A payload in a GET request has no defined behaviour.
The response to a GET reauest is cacheable unless if indicated to do otherwwise in
a Cache-Control header field. [RFC7234] Section 5.2 for more informations about it.


/*2.HEAD*/
--Not required in Webserv subject.--


/*3.POST*/
POST method requests that the target resource process the representation enclosed
in the request according to the resourceâ€™s own specific semantics.
Examples of use :
	-Providing a block of data to a data-handling process.
	-Posting a message to a bulletin board, maililng list, blog, ...
	-Creating a new resource that has to be identified by the server.
	-Appending data to a resource's existing representation.
A server indicated response by choosing a status code depending of the result of processing
the POST request. The only reponses that cannot be received in a response to POST are
206, 304 and 416.
If resource(s) has been created on the server as a result of successfuly processing a POST
request the origin server send a 201 response containing a Location header field providing
an identifier for the resource created and a representation describing the status.
Page 26 about responses to POST being cacheable or not and behaviours depending on it.


/*4.PUT*/
--Not required in Webserv subject.--


/*5.DELETE*/
DELETE method requests that the server remove the association between the target resource
and its current functionality. This method is similar to the rm command in UNIX: it expresses
a deletion operation on the URI mapping of the server rather than an expectation that the
previously associated information be deleted.
If the target resource has one or more current representations, they might or might not be
destroyed by the origin server, and the associated storage might or might not be reclaimed,
depending entirely on the nature of the resource and its implementation by the origin server.
Other implementation aspects of a resource might need to be deactivated or archived as a result
of a DELETE, such as database or gateway connections. The server will only allow DELETE on
resources that has a prescribed mechanism for accomplishing the deletion.
Only few resources allow the DELETE method and it is mostly used for remote authoring environments.
Example page 29.
After a successful DELETE method the server send a 202 status code if the action will likely succeed
but is not enacted yetm 204 if the action has been enacted and no further informations has to be
supplied or a 200 if the action has been encated and the reponse message has a reprenseation
describing the status.
A payload in a DELETE request message has no defined behaviour.
Responses to the DELETE method are not cacheable.


/*6.CONNECT*/
--Not required in Webserv subject.--


/*7.OPTIONS*/
--Not required in Webserv subject.--


/*8.TRACE*/
--Not required in Webserv subject.--