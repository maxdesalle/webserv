|-----------------------------------|
|--------REQUEST HEADER FIELDS------|
|-----------------------------------|

A client sends request header fields to provide more information about the request
context, make the request conditional based on the target resource state, suggest 
preferred formats for the response, supply authentication credentials, or modify the 
expected request processing. These fields act as request modifiers, similar to the
parameters on a programming language method invocation.



--------------------------------
------------CONTROLS------------
--------------------------------

Controls are request header fields that direct specific handling of the request :
	-Cache-Control, [RFC7234] Section 5.2 
	-Expect
	-Host, [RFC7230] Section 5.4
	-Max-Forwards
	-Pragma, [RFC7234] Section 5.4
	-Range, [RFC7233] Section 3.1
	-TE, [RFC7230] Section 4.3


/*1.Expect*/
This request header field gives a set of behaviors needed to be supported by the server
to handle the request.
Expect = "100-continue"
A server receiving an Expect field-value other than 100-continue may respond with a 417
status code as the unexpected expectation cannot be met.
A 100-continue expectation informs that the client will send a mesage body in the request
and wants to receive a 100 interim responses if the request-line and header fields are not
sufficient to cause an immediate success, redirect, or error response.
Example page 34.
All requirements/behaviors for clients and servers page 34 and 35.


/*2.Max-Forwards*/
--Not asked for Webserv as it is by default useless without TRACE and OPTIONS--



--------------------------------
----------CONDITIONNALS---------
--------------------------------

These header fields allow a client to place a condition on the state of the target resource
using a comparison between a set of validators obtained from prior representations of the
target resource to the current state of validators for the selected representation.
All about conditionnal header fields in [RFC7232].
	-If-Match, [RFC7232] Section 3.1
	-If-None-Match, [RFC7232] Section 3.2
	-If-Modified-Since, [RFC7232] Section 3.3
	-If-Unmodified-Since, [RFC7232] Section 3.4
	-If-Range, [RFC7232] Section 3.2



--------------------------------
-------CONTENT NEGOTIATION------
--------------------------------

These header fields are sent to engage in a negotiation of the response content. The
preferences sent is these fields apply to the content in the response, the representations
of the target resource, representations of error, processing status or even the text that
might appear in the protocol.
	-Accept
	-Accept-Charset
	-Accept-Encoding
	-Accept-language


/*1.Quality values*/
Many of these fields use a parameter "q" to assign a relative weight called "quality value"
or "qvalue" to the preference for that associated kind of content.
The weight is normalized between 0 and 1, where 0.001 is the least preferred and 1 is the most.
A value of 0 means not acceptable at all. If no "q" parameter is present the default wieght is 1.
weight = OWS ";" OWS "q=" qvalue
qvalue = ( "0" [ "." 0*3DIGIT ] ) / ("1" [ "." 0*3("0") ] )
A sender of qvalue mustn't generate more than 3 digits after decimal point.


/*2.Accept*/
This field can be used to specify acceptable response media types.
Accept = # (media-range [ accept-params ] )
media-range = ( "*/*" / ( type "/" "*" ) / ( type "/" subtype ) ) *( OWS ";" OWS parameter )
accept-params = weight *( accept-ext )
accept-ext = OWS ";" OWS token [ "=" ( token / quoted-string ) ]
The asterisk "*" is used to group media types into ranges, with "*/*" indicating all media types
and "type/*" indicating all subtypes of that type.
Each media-range might be followed by zero or more applicable media type parameters, an optional "q"
parameter, and zero or more extension parameters.
Example :  "Accept: audio/*; q=0.2, audio/basic"
Example :  "Accept: text/plain; q=0.5, text/html,
 					text/x-dvi; q=0.8, text/x-c"
A request without any Accept field implies that the user will accept any media type in response.
If the reponses doesn't have any media type that is listed as acceptable the server can send a 406
reponse.
Specific precisions at page 39 and 40.


/*3.Accept-Charset*/
This field is used to indicate what charsets are acceptable in textual responses.
Accept-Charset = 1#( ( charset / "*" ) [ weight ] )
A user can associate a qvalue with each charset.
Example : "Accept-Charset: iso-8859-5, unicode-1-1;q=0.8"
If a "*" is in this field it matches any charset that is not explicitely mentioned in it.
If there is no "*" none of the not explicitely mentioned charset is acceptable.
A request with no Accept-Charset field implies that the user will acept any charset in response.
406 as response if no charset in the response as no acceptable charset.


/*4.Accept-Encoding*/
This field indicates what response content-codings are acceptable in the response.
An "identity" token is used as a synonym for "no encoding" in order to communicate when no encoding
is preferred.
Accept-Encoding = #( codings [ weight ] )
codings = content-coding / "identity" / "*"